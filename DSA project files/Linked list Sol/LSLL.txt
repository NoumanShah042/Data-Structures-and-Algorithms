#include <iostream>
using namespace std;
#ifndef LSLL_H
#define LSLL_H
template <typename T>
struct Node
{
	T info;
	Node <T>* next;
public:
	Node()
	{
		next = nullptr;
	}
	Node(T val)
	{
		info = val;
		next = nullptr;
	}
};
template <typename T>
class LSLL
{
	Node <T>* head;
public:
	LSLL()
	{
		head = nullptr;
	}
	void insertAtHead(T val)
	{
		Node <T>* x = new Node<T>(val);
		x->next = head;
		head = x;
	}
	void insertAtTail(T val)
	{
		if (head == nullptr)
		{
			head = new Node<T>(val);
			return;
		}
		Node <T>* p = head;
		while (p->next != nullptr)
		{
			p = p->next;
		}
		p->next = new Node<T>(val);
	}
	void insertAfter(T key, T val)
	{
		Node<T>* p = head;
		while (p != nullptr)
		{
			if (p->info == key)
			{
				Node<T>* x = new Node<T>(val);
				x->next = p->next;
				p->next = x;
				return;
			}
			p = p->next;
		}
	}
	void insertBefore(T key, T val)
	{
		Node<T>* p = head;
		if (head->info == key)
		{
			Node<T>* x = new Node<T>(val);
			x->next = head;
			head= x;
		}
		while (p != nullptr)
		{
			if (p->next && p->next->info == key)
			{
				Node<T>* x = new Node<T>(val);
				x->next = p->next;
				p->next = x;
				return;
			}
			p = p->next;
		}
	}
	void remove(T key)
	{
		Node <T>* p = head;
		if (head->info == key)
		{
			removeAtHead();
			return;
		}
		while (p != nullptr)
		{
			if (p->next && p->next->info== key  )
			{
				p->next = p->next->next;
				return;
			}
			p = p->next;
		}
	}
	void removeAtHead()
	{
		Node <T>* p = head;
		if (p!=nullptr)
		{
			head= p->next;
			return;
		}
	}
	void removeAtTail()
	{
		Node <T>* p = head;
		if (head != nullptr && head->next == nullptr)
		{
			head = head->next;
			return;
		}
		while (p != nullptr)
		{
			if (p->next->next == nullptr)
			{
				p->next = p->next->next;
				return;
			}
			p = p->next;
		}
	}
	void removeAfter(T key)
	{
		if (head == nullptr)
			return;
		Node<T>* p = head;
		while (p != nullptr)
		{
			if (p->info == key && p->next!=nullptr)
			{
				Node <T>* x = p->next;
				p->next = x->next;
				delete x;
				return;
			}
			p=p->next;
		}
	}
	void removeBefore(T key)
	{
		Node <T>* p = head;
		Node <T>* prev = head;
		if (head->next->info==key)
		{
			head = head->next;
			return;
		}
		while (p != nullptr)
		{
			if (p->next && p->next->info == key)
			{
				Node <T>* x = p->next;
				prev->next = x;
				return;
			}
			prev = p;
			p = p->next;
		}
	}
	void display()
	{
		Node <T>* p = head;
		while (p != nullptr)
		{
			cout << p->info << ":";
			p = p->next;
		}
		cout << '\n';
	}
	~LSLL()
	{
		while (head != nullptr)
		{
			removeAtHead();
		}
	}
};
#endif // !LSLL_H